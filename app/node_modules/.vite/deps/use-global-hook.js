import {
  require_react
} from "./chunk-ZGRSIX2Q.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/use-global-hook/esm/core/associateActions.js
function associateActions(store, actions) {
  const associatedActions = {};
  Object.keys(actions).forEach((key) => {
    if (typeof actions[key] === "function") {
      associatedActions[key] = actions[key].bind(null, store);
    }
    if (typeof actions[key] === "object") {
      associatedActions[key] = associateActions(store, actions[key]);
    }
  });
  return associatedActions;
}

// node_modules/use-global-hook/esm/core/setState.js
function setState(store, newState, afterUpdateCallback) {
  store.state = {
    ...store.state,
    ...newState
  };
  store.runListeners();
  afterUpdateCallback && afterUpdateCallback();
}

// node_modules/use-global-hook/esm/core/customHook.js
var import_react = __toESM(require_react());

// node_modules/use-global-hook/esm/core/cleanUpListener.js
var cleanUpListener = (store, newListener) => () => {
  store.listeners = store.listeners.filter((listener) => listener !== newListener);
};

// node_modules/use-global-hook/esm/core/newListenerEffect.js
var newListenerEffect = (store, oldState, mapState, originalHook) => {
  const newListener = {
    oldState
  };
  newListener.run = mapState ? (newState) => {
    const mappedState = mapState(newState);
    if (mappedState !== newListener.oldState) {
      newListener.oldState = mappedState;
      originalHook(mappedState);
    }
  } : originalHook;
  store.listeners.push(newListener);
  return cleanUpListener(store, newListener);
};

// node_modules/use-global-hook/esm/core/customHook.js
function customHook(store, mapState, mapActions) {
  const state = mapState ? mapState(store.state) : store.state;
  const actions = mapActions ? mapActions(store.actions) : store.actions;
  const originalHook = (0, import_react.useState)(state)[1];
  (0, import_react.useEffect)(newListenerEffect(store, state, mapState, originalHook), []);
  return [state, actions];
}

// node_modules/use-global-hook/esm/core/runListeners.js
var runListeners = (store) => {
  store.listeners.forEach((listener) => {
    listener.run(store.state);
  });
};

// node_modules/use-global-hook/esm/plugins/immer/immerAction.js
var immerAction = (store, originalFunction) => (...args) => {
  const result = originalFunction(...args);
  if (typeof result === "function")
    store.setState(result);
};

// node_modules/use-global-hook/esm/plugins/immer/wrapActions.js
function wrapActions(store, actions) {
  const wrappedActions = {};
  Object.keys(actions).forEach((key) => {
    if (typeof actions[key] === "function") {
      const originalFunction = actions[key];
      actions[key] = immerAction(store, originalFunction);
    }
    if (typeof actions[key] === "object") {
      wrappedActions[key] = wrapActions(store, actions[key]);
    }
  });
  return wrappedActions;
}

// node_modules/use-global-hook/esm/plugins/immer/index.js
var immerPlugin = (Immer, store) => {
  const _setState = store.setState;
  store.setState = (input) => {
    if (input instanceof Function) {
      store.state = Immer(store.state, input);
      store.runListeners();
    } else {
      _setState(input);
    }
  };
  wrapActions(store, store.actions);
};

// node_modules/use-global-hook/esm/core/setupOptions.js
var setupOptions = (store, options = {}) => {
  if (options instanceof Function) {
    options(store);
    return;
  }
  const {
    Immer,
    initializer
  } = options;
  Immer && immerPlugin(Immer, store);
  initializer && initializer(store);
};

// node_modules/use-global-hook/esm/core/index.js
var useStore = (initialState, actions, options) => {
  const store = {
    state: initialState,
    listeners: []
  };
  store.setState = setState.bind(null, store);
  store.runListeners = runListeners.bind(null, store);
  store.actions = associateActions(store, actions);
  setupOptions(store, options);
  return customHook.bind(null, store);
};
var core_default = useStore;
export {
  core_default as default
};
/*! Bundled license information:

use-global-hook/esm/index.js:
  (** @license UseGlobalHook v0.3.0
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=use-global-hook.js.map
