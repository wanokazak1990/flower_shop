import React, { useRef, useEffect, useLayoutEffect, useCallback, useMemo, useState, useReducer, useSyncExternalStore } from 'react';

function usePrevious(state) {
  const ref = useRef();
  useEffect(() => {
    ref.current = state;
  });
  return ref.current;
}

function useLatest(value) {
  const ref = useRef(value);
  useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref;
}

function useFirstMountState() {
  const isFirst = useRef(true);
  if (isFirst.current) {
    isFirst.current = false;
    return true;
  }
  return isFirst.current;
}

const createUpdateEffect = (hook) => (effect, deps) => {
  const isFirstMount = useFirstMountState();
  hook(() => {
    if (!isFirstMount) {
      return effect();
    }
  }, deps);
};

var useUpdateEffect = createUpdateEffect(useEffect);

var index$3 = createUpdateEffect(useLayoutEffect);

var _a;
const isFunction$1 = (val) => typeof val === "function";
const isString = (val) => typeof val === "string";
const isDev = process.env.NODE_ENV === "development" || process.env.NODE_ENV === "test";
const isBrowser = typeof window !== "undefined";
const isNavigator = typeof navigator !== "undefined";
const noop = () => {
};
const isIOS = isBrowser && ((_a = window == null ? void 0 : window.navigator) == null ? void 0 : _a.userAgent) && /iP(ad|hone|od)/.test(window.navigator.userAgent);
!React.useId;

function guessSerializerType(rawInit) {
  return rawInit == null || rawInit === void 0 ? "any" : rawInit instanceof Set ? "set" : rawInit instanceof Map ? "map" : rawInit instanceof Date ? "date" : typeof rawInit === "boolean" ? "boolean" : typeof rawInit === "string" ? "string" : typeof rawInit === "object" ? "object" : Array.isArray(rawInit) ? "object" : !Number.isNaN(rawInit) ? "number" : "any";
}

const useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;

function useEvent(fn) {
  if (isDev) {
    if (!isFunction$1(fn)) {
      console.error(
        `useEvent expected parameter is a function, got ${typeof fn}`
      );
    }
  }
  const handlerRef = useRef(fn);
  useIsomorphicLayoutEffect(() => {
    handlerRef.current = fn;
  }, [fn]);
  return useCallback((...args) => {
    const fn2 = handlerRef.current;
    return fn2(...args);
  }, []);
}

const defaultOptions$1 = {};
const defaultOnError = (e) => {
  console.error(e);
};

const StorageSerializers = {
  boolean: {
    read: (v) => v === "true",
    write: (v) => String(v)
  },
  object: {
    read: (v) => JSON.parse(v),
    write: (v) => JSON.stringify(v)
  },
  number: {
    read: (v) => Number.parseFloat(v),
    write: (v) => String(v)
  },
  any: {
    read: (v) => v,
    write: (v) => String(v)
  },
  string: {
    read: (v) => v,
    write: (v) => String(v)
  },
  map: {
    read: (v) => new Map(JSON.parse(v)),
    write: (v) => JSON.stringify(Array.from(v.entries()))
  },
  set: {
    read: (v) => new Set(JSON.parse(v)),
    write: (v) => JSON.stringify(Array.from(v))
  },
  date: {
    read: (v) => new Date(v),
    write: (v) => v.toISOString()
  }
};
const getInitialState$4 = (key, defaultValue, storage, serializer, onError) => {
  if (defaultValue !== void 0) {
    return defaultValue;
  }
  if (isBrowser) {
    try {
      const raw = storage == null ? void 0 : storage.getItem(key);
      if (raw !== void 0 && raw !== null) {
        return serializer == null ? void 0 : serializer.read(raw);
      }
    } catch (error) {
      onError == null ? void 0 : onError(error);
    }
  }
  if (process.env.NODE_ENV !== "production") {
    console.warn(
      "`createStorage` When server side rendering, defaultValue should be defined to prevent a hydration mismatches."
    );
  }
  return null;
};
function useStorage(key, defaultValue, getStorage = () => isBrowser ? sessionStorage : void 0, options = defaultOptions$1) {
  let storage;
  const { onError = defaultOnError, csrData } = options;
  try {
    storage = getStorage();
  } catch (err) {
    onError(err);
  }
  const type = guessSerializerType(defaultValue);
  const serializer = useMemo(() => {
    var _a;
    return (_a = options.serializer) != null ? _a : StorageSerializers[type];
  }, [options.serializer, type]);
  const [state, setState] = useState(
    getInitialState$4(key, defaultValue, storage, serializer, onError)
  );
  useEffect(() => {
    const data = csrData ? isFunction$1(csrData) ? csrData() : csrData : defaultValue;
    const getStoredValue = () => {
      try {
        const raw = storage == null ? void 0 : storage.getItem(key);
        if (raw !== void 0 && raw !== null) {
          return serializer.read(raw);
        } else {
          storage == null ? void 0 : storage.setItem(key, serializer.write(data));
          return data;
        }
      } catch (e) {
        onError(e);
      }
    };
    setState(getStoredValue());
  }, [key, defaultValue, serializer, storage, onError, csrData]);
  const updateState = useEvent(
    (valOrFunc) => {
      const currentState = isFunction$1(valOrFunc) ? valOrFunc(state) : valOrFunc;
      setState(currentState);
      if (currentState === null) {
        storage == null ? void 0 : storage.removeItem(key);
      } else {
        try {
          storage == null ? void 0 : storage.setItem(key, serializer.write(currentState));
        } catch (e) {
          onError(e);
        }
      }
    }
  );
  return [state, updateState];
}

function useLocalStorage(key, defaultValue, options = defaultOptions$1) {
  return useStorage(
    key,
    defaultValue,
    () => isBrowser ? localStorage : void 0,
    options
  );
}

function useSessionStorage(key, defaultValue, options = defaultOptions$1) {
  return useStorage(
    key,
    defaultValue,
    () => isBrowser ? sessionStorage : void 0,
    options
  );
}

const toggleReducer = (state, nextValue) => typeof nextValue === "boolean" ? nextValue : !state;
function useToggle(initialValue) {
  return useReducer(toggleReducer, initialValue);
}

function useInterval(callback, delay, options = defaultOptions$1) {
  const immediate = options.immediate;
  const savedCallback = useLatest(callback);
  useEffect(() => {
    if (immediate) {
      savedCallback.current();
    }
    if (delay !== null) {
      const interval = setInterval(() => savedCallback.current(), delay || 0);
      return () => clearInterval(interval);
    }
    return void 0;
  }, [delay, immediate]);
}

function useDarkMode(options) {
  const {
    selector = "html",
    attribute = "class",
    classNameDark = "",
    classNameLight = "",
    storageKey = "reactuses-color-scheme",
    storage = () => isBrowser ? localStorage : void 0,
    defaultValue = false
  } = options;
  const value = () => {
    return window.matchMedia("(prefers-color-scheme: dark)").matches;
  };
  const [dark, setDark] = useStorage(
    storageKey,
    defaultValue,
    storage,
    {
      csrData: value
    }
  );
  useEffect(() => {
    const element = window == null ? void 0 : window.document.querySelector(selector);
    if (!element) {
      return;
    }
    if (attribute === "class") {
      dark && classNameDark && element.classList.add(classNameDark);
      !dark && classNameLight && element.classList.add(classNameLight);
    } else {
      dark && classNameDark && element.setAttribute(attribute, classNameDark);
      !dark && classNameLight && element.setAttribute(attribute, classNameLight);
    }
    return () => {
      if (!element) {
        return;
      }
      if (attribute === "class") {
        dark && classNameDark && element.classList.remove(classNameDark);
        !dark && classNameLight && element.classList.remove(classNameLight);
      } else {
        dark && classNameDark && element.removeAttribute(attribute);
        !dark && classNameLight && element.removeAttribute(attribute);
      }
    };
  }, [attribute, classNameDark, classNameLight, dark, selector]);
  return [dark, () => setDark((dark2) => !dark2), setDark];
}

const getInitialState$3 = (query, defaultState) => {
  if (defaultState !== void 0) {
    return defaultState;
  }
  if (isBrowser) {
    return window.matchMedia(query).matches;
  }
  if (process.env.NODE_ENV !== "production") {
    console.warn(
      "`useMediaQuery` When server side rendering, defaultState should be defined to prevent a hydration mismatches."
    );
  }
  return false;
};
function useMediaQuery(query, defaultState) {
  const [state, setState] = useState(getInitialState$3(query, defaultState));
  useEffect(() => {
    var _a;
    let mounted = true;
    const mql = window.matchMedia(query);
    const onChange = () => {
      if (!mounted) {
        return;
      }
      setState(!!mql.matches);
    };
    if ("addEventListener" in mql) {
      mql.addEventListener("change", onChange);
    } else {
      (_a = mql.addListener) == null ? void 0 : _a.call(mql, onChange);
    }
    setState(mql.matches);
    return () => {
      var _a2;
      mounted = false;
      if ("removeEventListener" in mql) {
        mql.removeEventListener("change", onChange);
      } else {
        (_a2 = mql.removeListener) == null ? void 0 : _a2.call(mql, onChange);
      }
    };
  }, [query]);
  return state;
}

function usePreferredDark(defaultState) {
  return useMediaQuery("(prefers-color-scheme: dark)", defaultState);
}

function useMount(fn) {
  if (isDev) {
    if (!isFunction$1(fn)) {
      console.error(
        `useMount: parameter \`fn\` expected to be a function, but got "${typeof fn}".`
      );
    }
  }
  useEffect(() => {
    fn == null ? void 0 : fn();
  }, []);
}

function useUnmount(fn) {
  if (isDev) {
    if (!isFunction$1(fn)) {
      console.error(
        `useUnmount expected parameter is a function, got ${typeof fn}`
      );
    }
  }
  const fnRef = useLatest(fn);
  useEffect(
    () => () => {
      fnRef.current();
    },
    [fnRef]
  );
}

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Built-in value references. */
var Symbol = root.Symbol;

/** Used for built-in method references. */
var objectProto$b = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$8 = objectProto$b.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$b.toString;

/** Built-in value references. */
var symToStringTag$1 = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty$8.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$a = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto$a.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/** `Object#toString` result references. */
var symbolTag$1 = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag$1);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/** Used to match a single whitespace character. */
var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim(string) {
  return string
    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
    : string;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag$1 = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag$1 || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/** Used for built-in method references. */
var funcProto$1 = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString$1.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto$9 = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$7 = objectProto$9.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty$7).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue$1(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue$1(object, key);
  return baseIsNative(value) ? value : undefined;
}

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$1 = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/** Used for built-in method references. */
var objectProto$8 = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$8;

  return value === proto;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/** `Object#toString` result references. */
var argsTag$2 = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag$2;
}

/** Used for built-in method references. */
var objectProto$7 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable$1 = objectProto$7.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty$6.call(value, 'callee') &&
    !propertyIsEnumerable$1.call(value, 'callee');
};

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

/** Detect free variable `exports`. */
var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

/** Built-in value references. */
var Buffer = moduleExports$1 ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/** `Object#toString` result references. */
var argsTag$1 = '[object Arguments]',
    arrayTag$1 = '[object Array]',
    boolTag$1 = '[object Boolean]',
    dateTag$1 = '[object Date]',
    errorTag$1 = '[object Error]',
    funcTag = '[object Function]',
    mapTag$2 = '[object Map]',
    numberTag$1 = '[object Number]',
    objectTag$2 = '[object Object]',
    regexpTag$1 = '[object RegExp]',
    setTag$2 = '[object Set]',
    stringTag$1 = '[object String]',
    weakMapTag$1 = '[object WeakMap]';

var arrayBufferTag$1 = '[object ArrayBuffer]',
    dataViewTag$2 = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag$1] = typedArrayTags[arrayTag$1] =
typedArrayTags[arrayBufferTag$1] = typedArrayTags[boolTag$1] =
typedArrayTags[dataViewTag$2] = typedArrayTags[dateTag$1] =
typedArrayTags[errorTag$1] = typedArrayTags[funcTag] =
typedArrayTags[mapTag$2] = typedArrayTags[numberTag$1] =
typedArrayTags[objectTag$2] = typedArrayTags[regexpTag$1] =
typedArrayTags[setTag$2] = typedArrayTags[stringTag$1] =
typedArrayTags[weakMapTag$1] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/** Used for built-in method references. */
var objectProto$6 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$5.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$4 = objectProto$5.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$4.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$4.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED$2 ? undefined : result;
  }
  return hasOwnProperty$3.call(data, key) ? data[key] : undefined;
}

/** Used for built-in method references. */
var objectProto$3 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty$2.call(data, key);
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
  return this;
}

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/* Built-in method references that are verified to be native. */
var Map$1 = getNative(root, 'Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map$1 || ListCache),
    'string': new Hash
  };
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map$1 || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/** Used for built-in method references. */
var objectProto$2 = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto$2.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

/* Built-in method references that are verified to be native. */
var Promise$1 = getNative(root, 'Promise');

/* Built-in method references that are verified to be native. */
var Set$1 = getNative(root, 'Set');

/** `Object#toString` result references. */
var mapTag$1 = '[object Map]',
    objectTag$1 = '[object Object]',
    promiseTag = '[object Promise]',
    setTag$1 = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag$1 = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map$1),
    promiseCtorString = toSource(Promise$1),
    setCtorString = toSource(Set$1),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag$1) ||
    (Map$1 && getTag(new Map$1) != mapTag$1) ||
    (Promise$1 && getTag(Promise$1.resolve()) != promiseTag) ||
    (Set$1 && getTag(new Set$1) != setTag$1) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag$1 ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag$1;
        case mapCtorString: return mapTag$1;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag$1;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

var getTag$1 = getTag;

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$3 = 1,
    COMPARE_UNORDERED_FLAG$1 = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG$1) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$2 = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$1 = 1;

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty$1.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag$1(object),
      othTag = othIsArr ? arrayTag : getTag$1(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

/** Error message constants. */
var FUNC_ERROR_TEXT$1 = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;

    return maxing
      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
      : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

function useThrottleFn(fn, wait, options) {
  if (isDev) {
    if (!isFunction$1(fn)) {
      console.error(
        `useThrottleFn expected parameter is a function, got ${typeof fn}`
      );
    }
  }
  const fnRef = useLatest(fn);
  const throttled = useMemo(
    () => throttle(
      (...args) => {
        return fnRef.current(...args);
      },
      wait,
      options
    ),
    [wait, options]
  );
  useUnmount(() => {
    throttled.cancel();
  });
  return {
    run: throttled,
    cancel: throttled.cancel,
    flush: throttled.flush
  };
}

function useThrottle(value, wait, options) {
  const [throttled, setThrottled] = useState(value);
  const { run } = useThrottleFn(
    () => {
      setThrottled(value);
    },
    wait,
    options
  );
  useEffect(() => {
    run();
  }, [run, value]);
  return throttled;
}

function useDebounceFn(fn, wait, options) {
  if (isDev) {
    if (!isFunction$1(fn)) {
      console.error(
        `useDebounceFn expected parameter is a function, got ${typeof fn}`
      );
    }
  }
  const fnRef = useLatest(fn);
  const debounced = useMemo(
    () => debounce(
      (...args) => {
        return fnRef.current(...args);
      },
      wait,
      options
    ),
    [options, wait]
  );
  useUnmount(() => {
    debounced.cancel();
  });
  return {
    run: debounced,
    cancel: debounced.cancel,
    flush: debounced.flush
  };
}

function useDebounce(value, wait, options) {
  const [debounced, setDebounced] = useState(value);
  const { run } = useDebounceFn(
    () => {
      setDebounced(value);
    },
    wait,
    options
  );
  useEffect(() => {
    run();
  }, [run, value]);
  return debounced;
}

function useRafState(initialState) {
  const frame = useRef(0);
  const [state, setState] = useState(initialState);
  const setRafState = useCallback((value) => {
    cancelAnimationFrame(frame.current);
    frame.current = requestAnimationFrame(() => {
      setState(value);
    });
  }, []);
  useUnmount(() => {
    cancelAnimationFrame(frame.current);
  });
  return [state, setRafState];
}

const updateReducer = (num) => (num + 1) % 1e6;
function useUpdate() {
  const [, update] = useReducer(updateReducer, 0);
  return update;
}

function useTimeoutFn(cb, interval, options = defaultOptions$1) {
  const { immediate = true } = options;
  const [pending, setPending] = useState(false);
  const savedCallback = useLatest(cb);
  const timer = useRef();
  const stop = useEvent(() => {
    setPending(false);
    if (timer.current) {
      clearTimeout(timer.current);
    }
  });
  const start = useEvent((...args) => {
    if (timer) {
      clearTimeout(timer.current);
    }
    timer.current = setTimeout(() => {
      setPending(false);
      savedCallback.current(...args);
    }, interval);
    setPending(true);
  });
  useEffect(() => {
    if (immediate) {
      start();
    }
    return stop;
  }, [stop, immediate, interval, start]);
  return [pending, start, stop];
}

function useTimeout(ms = 0, options = {}) {
  const update = useUpdate();
  return useTimeoutFn(update, ms, options);
}

function useMountedState() {
  const mountedRef = useRef(false);
  const get = useCallback(() => mountedRef.current, []);
  useEffect(() => {
    mountedRef.current = true;
    return () => {
      mountedRef.current = false;
    };
  }, []);
  return get;
}

function on(obj, ...args) {
  if (obj && obj.addEventListener) {
    obj.addEventListener(
      ...args
    );
  }
}
function off(obj, ...args) {
  if (obj && obj.removeEventListener) {
    obj.removeEventListener(
      ...args
    );
  }
}
const defaultWindow = isBrowser ? window : void 0;

function getTargetElement(target, defaultElement) {
  if (!isBrowser) {
    return void 0;
  }
  if (!target) {
    return defaultElement;
  }
  let targetElement;
  if (isFunction$1(target)) {
    targetElement = target();
  } else if ("current" in target) {
    targetElement = target.current;
  } else {
    targetElement = target;
  }
  return targetElement;
}
function useLatestElement(target, defaultElement) {
  const [latestElement, setLatestElement] = useState(
    getTargetElement(target, defaultElement)
  );
  useEffect(() => {
    setLatestElement(getTargetElement(target, defaultElement));
  }, [target, defaultElement]);
  return latestElement;
}

function useEventListener(eventName, handler, element, options = defaultOptions$1) {
  const savedHandler = useLatest(handler);
  const targetElement = useLatestElement(element, defaultWindow);
  useEffect(() => {
    if (!(targetElement && targetElement.addEventListener)) {
      return;
    }
    const eventListener = (event) => savedHandler.current(event);
    on(targetElement, eventName, eventListener, options);
    return () => {
      if (!(targetElement && targetElement.removeEventListener)) {
        return;
      }
      off(targetElement, eventName, eventListener);
    };
  }, [eventName, targetElement, options, savedHandler]);
}

function useCounter(initialValue = 0, max = null, min = null) {
  const initFunc = () => {
    let init = typeof initialValue === "function" ? initialValue() : initialValue;
    typeof init !== "number" && console.error(
      `initialValue has to be a number, got ${typeof initialValue}`
    );
    if (typeof min === "number") {
      init = Math.max(init, min);
    } else if (min !== null) {
      console.error(`min has to be a number, got ${typeof min}`);
    }
    if (typeof max === "number") {
      init = Math.min(init, max);
    } else if (max !== null) {
      console.error(`max has to be a number, got ${typeof max}`);
    }
    return init;
  };
  const [value, setValue] = useState(initFunc);
  const set = useEvent(
    (newState) => {
      setValue((v) => {
        let nextValue = typeof newState === "function" ? newState(v) : newState;
        if (typeof min === "number") {
          nextValue = Math.max(nextValue, min);
        }
        if (typeof max === "number") {
          nextValue = Math.min(nextValue, max);
        }
        return nextValue;
      });
    }
  );
  const inc = (delta = 1) => {
    set((value2) => value2 + delta);
  };
  const dec = (delta = 1) => {
    set((value2) => value2 - delta);
  };
  const reset = () => {
    set(initFunc);
  };
  return [value, set, inc, dec, reset];
}

function useRafFn(callback, initiallyActive = true) {
  const raf = useRef(null);
  const rafActivity = useRef(false);
  const rafCallback = useLatest(callback);
  const step = useCallback(
    (time) => {
      if (rafActivity.current) {
        rafCallback.current(time);
        raf.current = requestAnimationFrame(step);
      }
    },
    [rafCallback]
  );
  const result = useMemo(
    () => [
      () => {
        if (rafActivity.current) {
          rafActivity.current = false;
          raf.current && cancelAnimationFrame(raf.current);
        }
      },
      () => {
        if (!rafActivity.current) {
          rafActivity.current = true;
          raf.current = requestAnimationFrame(step);
        }
      },
      () => rafActivity.current
      // isActive
    ],
    [step]
  );
  useEffect(() => {
    if (initiallyActive) {
      result[1]();
    }
    return result[0];
  }, [initiallyActive, result]);
  return result;
}

function useEventEmitter() {
  const listeners = useRef([]);
  const _disposed = useRef(false);
  const _event = useRef((listener) => {
    listeners.current.push(listener);
    const disposable = {
      dispose: () => {
        if (!_disposed.current) {
          for (let i = 0; i < listeners.current.length; i++) {
            if (listeners.current[i] === listener) {
              listeners.current.splice(i, 1);
              return;
            }
          }
        }
      }
    };
    return disposable;
  });
  const fire = (arg1, arg2) => {
    const queue = [];
    for (let i = 0; i < listeners.current.length; i++) {
      queue.push(listeners.current[i]);
    }
    for (let i = 0; i < queue.length; i++) {
      queue[i].call(void 0, arg1, arg2);
    }
  };
  const dispose = () => {
    if (listeners.current.length !== 0) {
      listeners.current.length = 0;
    }
    _disposed.current = true;
  };
  return [_event.current, fire, dispose];
}

function useFavicon(href, baseUrl = "", rel = "icon") {
  useEffect(() => {
    const url = `${baseUrl}${href}`;
    const element = document.head.querySelectorAll(
      `link[rel*="${rel}"]`
    );
    element.forEach((el) => el.href = url);
    if (element.length === 0) {
      const link = document.createElement("link");
      link.rel = rel;
      link.href = url;
      document.getElementsByTagName("head")[0].appendChild(link);
    }
  }, [baseUrl, href, rel]);
}

function useMutationObserver(callback, target, options = defaultOptions$1) {
  const callbackRef = useLatest(callback);
  const observerRef = useRef();
  const element = useLatestElement(target);
  const stop = useCallback(() => {
    if (observerRef.current) {
      observerRef.current.disconnect();
    }
  }, []);
  useEffect(() => {
    if (!element) {
      return;
    }
    observerRef.current = new MutationObserver(callbackRef.current);
    observerRef.current.observe(element, options);
    return stop;
  }, [options, element]);
  return stop;
}

const isPrimitive$1 = (val) => val !== Object(val);
function useCustomCompareEffect(effect, deps, depsEqual) {
  if (process.env.NODE_ENV !== "production") {
    if (!Array.isArray(deps) || !deps.length) {
      console.warn(
        "`useCustomCompareEffect` should not be used with no dependencies. Use React.useEffect instead."
      );
    }
    if (deps.every(isPrimitive$1)) {
      console.warn(
        "`useCustomCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead."
      );
    }
    if (typeof depsEqual !== "function") {
      console.warn(
        "`useCustomCompareEffect` should be used with depsEqual callback for comparing deps list"
      );
    }
  }
  const ref = useRef(void 0);
  if (!ref.current || !depsEqual(deps, ref.current)) {
    ref.current = deps;
  }
  useEffect(effect, ref.current);
}

const isPrimitive = (val) => val !== Object(val);
function useDeepCompareEffect(effect, deps) {
  if (process.env.NODE_ENV !== "production") {
    if (!Array.isArray(deps) || !deps.length) {
      console.warn(
        "`useDeepCompareEffect` should not be used with no dependencies. Use React.useEffect instead."
      );
    }
    if (deps.every(isPrimitive)) {
      console.warn(
        "`useDeepCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead."
      );
    }
  }
  useCustomCompareEffect(effect, deps, isEqual);
}

function useTitle(title) {
  useEffect(() => {
    document.title = title;
  }, [title]);
}

function useScriptTag(src, onLoaded = noop, options = defaultOptions$1) {
  const {
    immediate = true,
    manual = false,
    type = "text/javascript",
    async = true,
    crossOrigin,
    referrerPolicy,
    noModule,
    defer,
    attrs = {}
  } = options;
  const scriptTag = useRef(null);
  const _promise = useRef(null);
  const [status, setStatus] = useState(src ? "loading" : "idle");
  const loadScript = (waitForScriptLoad) => new Promise((resolve, reject) => {
    const resolveWithElement = (el2) => {
      scriptTag.current = el2;
      resolve(el2);
      return el2;
    };
    if (!document) {
      resolve(false);
      return;
    }
    if (!src) {
      setStatus("idle");
      resolve(false);
      return;
    }
    let shouldAppend = false;
    let el = document.querySelector(
      `script[src="${src}"]`
    );
    if (!el) {
      el = document.createElement("script");
      el.type = type;
      el.async = async;
      el.src = src;
      if (defer) {
        el.defer = defer;
      }
      if (crossOrigin) {
        el.crossOrigin = crossOrigin;
      }
      if (noModule) {
        el.noModule = noModule;
      }
      if (referrerPolicy) {
        el.referrerPolicy = referrerPolicy;
      }
      Object.entries(attrs).forEach(
        ([name, value]) => el == null ? void 0 : el.setAttribute(name, value)
      );
      shouldAppend = true;
    } else if (el.hasAttribute("data-loaded")) {
      setStatus(el.getAttribute("data-status"));
      resolveWithElement(el);
    }
    el.addEventListener("error", (event) => {
      setStatus(event.type === "load" ? "ready" : "error");
      return reject(event);
    });
    el.addEventListener("abort", (event) => {
      setStatus(event.type === "load" ? "ready" : "error");
      return reject(event);
    });
    el.addEventListener("load", (event) => {
      setStatus(event.type === "load" ? "ready" : "error");
      el.setAttribute("data-loaded", "true");
      onLoaded(el);
      resolveWithElement(el);
    });
    if (shouldAppend) {
      el = document.head.appendChild(el);
    }
    if (!waitForScriptLoad) {
      resolveWithElement(el);
    }
  });
  const load = (waitForScriptLoad = true) => {
    if (!_promise.current) {
      _promise.current = loadScript(waitForScriptLoad);
    }
    return _promise.current;
  };
  const unload = () => {
    if (!document) {
      return;
    }
    _promise.current = null;
    if (scriptTag.current) {
      scriptTag.current = null;
    }
    const el = document.querySelector(
      `script[src="${src}"]`
    );
    if (el) {
      document.head.removeChild(el);
    }
  };
  useMount(() => {
    if (immediate && !manual) {
      load();
    }
  });
  useUnmount(() => {
    if (!manual) {
      unload();
    }
  });
  return [scriptTag.current, status, load, unload];
}

function usePermission(permissionDesc) {
  const [state, setState] = useState("");
  useEffect(() => {
    var _a;
    const desc = typeof permissionDesc === "string" ? { name: permissionDesc } : permissionDesc;
    let mounted = true;
    let permissionStatus = null;
    const onChange = () => {
      if (!mounted) {
        return;
      }
      setState(() => {
        var _a2;
        return (_a2 = permissionStatus == null ? void 0 : permissionStatus.state) != null ? _a2 : "";
      });
    };
    (_a = navigator.permissions) == null ? void 0 : _a.query(desc).then((status) => {
      permissionStatus = status;
      on(permissionStatus, "change", onChange);
      onChange();
    }).catch(noop);
    return () => {
      permissionStatus && off(permissionStatus, "change", onChange);
      mounted = false;
      permissionStatus = null;
    };
  }, [permissionDesc]);
  return state;
}

const isTouchEvent = (ev) => {
  return "touches" in ev;
};
const preventDefault$1 = (ev) => {
  if (!isTouchEvent(ev)) {
    return;
  }
  if (ev.touches.length < 2 && ev.preventDefault) {
    ev.preventDefault();
  }
};
function useLongPress(callback, { isPreventDefault = true, delay = 300 } = defaultOptions$1) {
  const timeout = useRef();
  const target = useRef();
  const start = useCallback(
    (event) => {
      if (isPreventDefault && event.target) {
        on(event.target, "touchend", preventDefault$1, { passive: false });
        target.current = event.target;
      }
      timeout.current = setTimeout(() => callback(event), delay);
    },
    [callback, delay, isPreventDefault]
  );
  const clear = useCallback(() => {
    timeout.current && clearTimeout(timeout.current);
    if (isPreventDefault && target.current) {
      off(target.current, "touchend", preventDefault$1);
    }
  }, [isPreventDefault]);
  return {
    onMouseDown: (e) => start(e),
    onTouchStart: (e) => start(e),
    onMouseUp: clear,
    onMouseLeave: clear,
    onTouchEnd: clear
  };
}

function useObjectUrl(object) {
  const [url, setUrl] = useState();
  useEffect(() => {
    if (object) {
      setUrl(URL.createObjectURL(object));
    }
    return () => {
      if (url) {
        URL.revokeObjectURL(url);
      }
    };
  }, [object]);
  return url;
}

const defaultEvents$1 = [
  "mousemove",
  "mousedown",
  "resize",
  "keydown",
  "touchstart",
  "wheel"
];
const oneMinute = 6e4;
function useIdle(ms = oneMinute, initialState = false, events = defaultEvents$1) {
  const [state, setState] = useState(initialState);
  useEffect(() => {
    let mounted = true;
    let timeout;
    let localState = state;
    const set = (newState) => {
      if (mounted) {
        localState = newState;
        setState(newState);
      }
    };
    const onEvent = throttle(() => {
      if (localState) {
        set(false);
      }
      clearTimeout(timeout);
      timeout = setTimeout(() => set(true), ms);
    }, 50);
    const onVisibility = () => {
      if (!document.hidden) {
        onEvent();
      }
    };
    for (let i = 0; i < events.length; i++) {
      on(window, events[i], onEvent);
    }
    on(document, "visibilitychange", onVisibility);
    timeout = setTimeout(() => set(true), ms);
    return () => {
      mounted = false;
      for (let i = 0; i < events.length; i++) {
        off(window, events[i], onEvent);
      }
      off(document, "visibilitychange", onVisibility);
    };
  }, [ms, events]);
  return state;
}

function useSupported(callback, sync = false) {
  const [supported, setSupported] = useState(false);
  const effect = sync ? useIsomorphicLayoutEffect : useEffect;
  effect(() => {
    setSupported(Boolean(callback()));
  }, []);
  return supported;
}

var __async$5 = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
const defaultConstints = { audio: true, video: true };
function useMediaDevices(options = {}) {
  const { requestPermissions, constraints = defaultConstints } = options;
  const [state, setState] = useState({ devices: [] });
  const isSupported = useSupported(
    () => navigator && navigator.mediaDevices && navigator.mediaDevices.enumerateDevices
  );
  const permissionGranted = useRef(false);
  const stream = useRef(null);
  const onChange = useCallback(() => {
    navigator.mediaDevices.enumerateDevices().then((devices) => {
      if (stream.current) {
        stream.current.getTracks().forEach((t) => t.stop());
        stream.current = null;
      }
      setState({
        devices: devices.map(({ deviceId, groupId, kind, label }) => ({
          deviceId,
          groupId,
          kind,
          label
        }))
      });
    }).catch(noop);
  }, []);
  const ensurePermissions = useCallback(() => __async$5(this, null, function* () {
    if (!isSupported) {
      return false;
    }
    if (permissionGranted.current) {
      return true;
    }
    let state2;
    try {
      state2 = (yield navigator.permissions.query({
        name: "camera"
      })).state;
    } catch (error) {
      state2 = "prompt";
    }
    if (state2 !== "granted") {
      stream.current = yield navigator.mediaDevices.getUserMedia(constraints);
      onChange();
      permissionGranted.current = true;
    } else {
      permissionGranted.current = false;
    }
    return permissionGranted.current;
  }), [onChange, isSupported, constraints]);
  useEffect(() => {
    if (!isSupported) {
      return;
    }
    if (requestPermissions) {
      ensurePermissions();
    }
    on(navigator.mediaDevices, "devicechange", onChange);
    onChange();
    return () => {
      off(navigator.mediaDevices, "devicechange", onChange);
    };
  }, [onChange, isSupported, requestPermissions, ensurePermissions]);
  return [state, ensurePermissions];
}

function useTextDirection(options = defaultOptions$1) {
  const { selector = "html", initialValue = "ltr" } = options;
  const getValue = () => {
    var _a, _b;
    if (isBrowser) {
      return (_b = (_a = document == null ? void 0 : document.querySelector(selector)) == null ? void 0 : _a.getAttribute("dir")) != null ? _b : initialValue;
    } else {
      return initialValue;
    }
  };
  const [value, setValue] = useState(getValue());
  const set = (value2) => {
    var _a, _b;
    if (!isBrowser) {
      return;
    }
    if (value2 !== null) {
      (_a = document.querySelector(selector)) == null ? void 0 : _a.setAttribute("dir", value2);
    } else {
      (_b = document.querySelector(selector)) == null ? void 0 : _b.removeAttribute("dir");
    }
    setValue(value2);
  };
  return [value, set];
}

const initState = {
  screenX: Number.NaN,
  screenY: Number.NaN,
  clientX: Number.NaN,
  clientY: Number.NaN,
  pageX: Number.NaN,
  pageY: Number.NaN,
  elementX: Number.NaN,
  elementY: Number.NaN,
  elementH: Number.NaN,
  elementW: Number.NaN,
  elementPosX: Number.NaN,
  elementPosY: Number.NaN
};
function useMouse(target) {
  const [state, setState] = useRafState(initState);
  useEventListener(
    "mousemove",
    (event) => {
      const { screenX, screenY, clientX, clientY, pageX, pageY } = event;
      const newState = {
        screenX,
        screenY,
        clientX,
        clientY,
        pageX,
        pageY,
        elementX: Number.NaN,
        elementY: Number.NaN,
        elementH: Number.NaN,
        elementW: Number.NaN,
        elementPosX: Number.NaN,
        elementPosY: Number.NaN
      };
      const targetElement = getTargetElement(target);
      if (targetElement) {
        const { left, top, width, height } = targetElement.getBoundingClientRect();
        newState.elementPosX = left + window.pageXOffset;
        newState.elementPosY = top + window.pageYOffset;
        newState.elementX = pageX - newState.elementPosX;
        newState.elementY = pageY - newState.elementPosY;
        newState.elementW = width;
        newState.elementH = height;
      }
      setState(newState);
    },
    () => document
  );
  return state;
}

function useFps(options = defaultOptions$1) {
  var _a;
  const [fps, setFps] = useState(0);
  const every = (_a = options.every) != null ? _a : 10;
  const last = useRef(performance.now());
  const ticks = useRef(0);
  useRafFn(() => {
    ticks.current += 1;
    if (ticks.current >= every) {
      const now = performance.now();
      const diff = now - last.current;
      setFps(Math.round(1e3 / (diff / ticks.current)));
      last.current = now;
      ticks.current = 0;
    }
  });
  return fps;
}
const useFpsMock = (options) => 0;
var index$2 = typeof performance === "undefined" ? useFpsMock : useFps;

const initCoord = {
  accuracy: 0,
  latitude: Number.POSITIVE_INFINITY,
  longitude: Number.POSITIVE_INFINITY,
  altitude: null,
  altitudeAccuracy: null,
  heading: null,
  speed: null
};
function useGeolocation(options = defaultOptions$1) {
  const {
    enableHighAccuracy = true,
    maximumAge = 3e4,
    timeout = 27e3
  } = options;
  const [coordinates, setCoordinates] = useState(initCoord);
  const [locatedAt, setLocatedAt] = useState(null);
  const [error, setError] = useState(null);
  const updatePosition = useCallback((position) => {
    setCoordinates(position.coords);
    setLocatedAt(position.timestamp);
    setError(null);
  }, []);
  const updateError = useCallback((err) => {
    setCoordinates(initCoord);
    setLocatedAt(null);
    setError(err);
  }, []);
  useEffect(() => {
    navigator.geolocation.getCurrentPosition(updatePosition, updateError);
    const watchId = navigator.geolocation.watchPosition(
      updatePosition,
      updateError,
      {
        enableHighAccuracy,
        maximumAge,
        timeout
      }
    );
    return () => {
      if (watchId) {
        navigator.geolocation.clearWatch(watchId);
      }
    };
  }, [enableHighAccuracy, maximumAge, timeout, updateError, updatePosition]);
  return {
    coordinates,
    locatedAt,
    error
  };
}

var screenfull$1 = {exports: {}};

/*!
* screenfull
* v5.0.0 - 2019-09-09
* (c) Sindre Sorhus; MIT License
*/

(function (module) {
	(function () {

		var document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};
		var isCommonjs = module.exports;

		var fn = (function () {
			var val;

			var fnMap = [
				[
					'requestFullscreen',
					'exitFullscreen',
					'fullscreenElement',
					'fullscreenEnabled',
					'fullscreenchange',
					'fullscreenerror'
				],
				// New WebKit
				[
					'webkitRequestFullscreen',
					'webkitExitFullscreen',
					'webkitFullscreenElement',
					'webkitFullscreenEnabled',
					'webkitfullscreenchange',
					'webkitfullscreenerror'

				],
				// Old WebKit
				[
					'webkitRequestFullScreen',
					'webkitCancelFullScreen',
					'webkitCurrentFullScreenElement',
					'webkitCancelFullScreen',
					'webkitfullscreenchange',
					'webkitfullscreenerror'

				],
				[
					'mozRequestFullScreen',
					'mozCancelFullScreen',
					'mozFullScreenElement',
					'mozFullScreenEnabled',
					'mozfullscreenchange',
					'mozfullscreenerror'
				],
				[
					'msRequestFullscreen',
					'msExitFullscreen',
					'msFullscreenElement',
					'msFullscreenEnabled',
					'MSFullscreenChange',
					'MSFullscreenError'
				]
			];

			var i = 0;
			var l = fnMap.length;
			var ret = {};

			for (; i < l; i++) {
				val = fnMap[i];
				if (val && val[1] in document) {
					for (i = 0; i < val.length; i++) {
						ret[fnMap[0][i]] = val[i];
					}
					return ret;
				}
			}

			return false;
		})();

		var eventNameMap = {
			change: fn.fullscreenchange,
			error: fn.fullscreenerror
		};

		var screenfull = {
			request: function (element) {
				return new Promise(function (resolve, reject) {
					var onFullScreenEntered = function () {
						this.off('change', onFullScreenEntered);
						resolve();
					}.bind(this);

					this.on('change', onFullScreenEntered);

					element = element || document.documentElement;

					Promise.resolve(element[fn.requestFullscreen]()).catch(reject);
				}.bind(this));
			},
			exit: function () {
				return new Promise(function (resolve, reject) {
					if (!this.isFullscreen) {
						resolve();
						return;
					}

					var onFullScreenExit = function () {
						this.off('change', onFullScreenExit);
						resolve();
					}.bind(this);

					this.on('change', onFullScreenExit);

					Promise.resolve(document[fn.exitFullscreen]()).catch(reject);
				}.bind(this));
			},
			toggle: function (element) {
				return this.isFullscreen ? this.exit() : this.request(element);
			},
			onchange: function (callback) {
				this.on('change', callback);
			},
			onerror: function (callback) {
				this.on('error', callback);
			},
			on: function (event, callback) {
				var eventName = eventNameMap[event];
				if (eventName) {
					document.addEventListener(eventName, callback, false);
				}
			},
			off: function (event, callback) {
				var eventName = eventNameMap[event];
				if (eventName) {
					document.removeEventListener(eventName, callback, false);
				}
			},
			raw: fn
		};

		if (!fn) {
			if (isCommonjs) {
				module.exports = {isEnabled: false};
			} else {
				window.screenfull = {isEnabled: false};
			}

			return;
		}

		Object.defineProperties(screenfull, {
			isFullscreen: {
				get: function () {
					return Boolean(document[fn.fullscreenElement]);
				}
			},
			element: {
				enumerable: true,
				get: function () {
					return document[fn.fullscreenElement];
				}
			},
			isEnabled: {
				enumerable: true,
				get: function () {
					// Coerce to boolean in case of old WebKit
					return Boolean(document[fn.fullscreenEnabled]);
				}
			}
		});

		if (isCommonjs) {
			module.exports = screenfull;
		} else {
			window.screenfull = screenfull;
		}
	})();
} (screenfull$1));

var screenfull = screenfull$1.exports;

function useFullscreen(target, options = defaultOptions$1) {
  const { onExit, onEnter } = options;
  const [state, setState] = useState(false);
  const onChange = () => {
    if (screenfull.isEnabled) {
      const { isFullscreen } = screenfull;
      if (isFullscreen) {
        onEnter == null ? void 0 : onEnter();
      } else {
        screenfull.off("change", onChange);
        onExit == null ? void 0 : onExit();
      }
      setState(isFullscreen);
    }
  };
  const enterFullscreen = () => {
    const el = getTargetElement(target);
    if (!el) {
      return;
    }
    if (screenfull.isEnabled) {
      try {
        screenfull.request(el);
        screenfull.on("change", onChange);
      } catch (error) {
        console.error(error);
      }
    }
  };
  const exitFullscreen = () => {
    if (screenfull.isEnabled) {
      screenfull.exit();
    }
  };
  const toggleFullscreen = () => {
    if (state) {
      exitFullscreen();
    } else {
      enterFullscreen();
    }
  };
  useUnmount(() => {
    if (screenfull.isEnabled) {
      screenfull.off("change", onChange);
    }
  });
  return [
    state,
    {
      enterFullscreen: useEvent(enterFullscreen),
      exitFullscreen: useEvent(exitFullscreen),
      toggleFullscreen: useEvent(toggleFullscreen),
      isEnabled: screenfull.isEnabled
    }
  ];
}

const nav = isNavigator ? navigator : void 0;
const conn = nav && (nav.connection || nav.mozConnection || nav.webkitConnection);
function getConnectionState(previousState) {
  const online = nav == null ? void 0 : nav.onLine;
  const previousOnline = previousState == null ? void 0 : previousState.online;
  return {
    online,
    previous: previousOnline,
    since: online !== previousOnline ? /* @__PURE__ */ new Date() : previousState == null ? void 0 : previousState.since,
    downlink: conn == null ? void 0 : conn.downlink,
    downlinkMax: conn == null ? void 0 : conn.downlinkMax,
    effectiveType: conn == null ? void 0 : conn.effectiveType,
    rtt: conn == null ? void 0 : conn.rtt,
    saveData: conn == null ? void 0 : conn.saveData,
    type: conn == null ? void 0 : conn.type
  };
}
function useNetwork() {
  const [state, setState] = useState(getConnectionState);
  useEffect(() => {
    const handleStateChange = () => {
      setState(getConnectionState);
    };
    on(window, "online", handleStateChange, { passive: true });
    on(window, "offline", handleStateChange, { passive: true });
    if (conn) {
      on(conn, "change", handleStateChange, { passive: true });
    }
    return () => {
      off(window, "online", handleStateChange);
      off(window, "offline", handleStateChange);
      if (conn) {
        off(conn, "change", handleStateChange);
      }
    };
  }, []);
  return state;
}

function useOnline() {
  const { online } = useNetwork();
  return online;
}

const defaultState$1 = {
  angle: 0,
  type: "landscape-primary"
};
function useOrientation(initialState = defaultState$1) {
  const [state, setState] = useState(initialState);
  useEffect(() => {
    const screen = window.screen;
    let mounted = true;
    const onChange = () => {
      if (mounted) {
        const { orientation } = screen;
        if (orientation) {
          const { angle, type } = orientation;
          setState({ angle, type });
        } else if (window.orientation !== void 0) {
          setState({
            angle: typeof window.orientation === "number" ? window.orientation : 0,
            type: ""
          });
        }
      }
    };
    on(window, "orientationchange", onChange);
    onChange();
    return () => {
      mounted = false;
      off(window, "orientationchange", onChange);
    };
  }, []);
  const lockOrientation = (type) => {
    if (isBrowser) {
      return;
    }
    if (!(window && "screen" in window && "orientation" in window.screen)) {
      return Promise.reject(new Error("Not supported"));
    }
    return window.screen.orientation.lock(type);
  };
  const unlockOrientation = () => {
    if (isBrowser) {
      return;
    }
    if (!(window && "screen" in window && "orientation" in window.screen)) {
      return;
    }
    return window.screen.orientation.unlock();
  };
  return [state, lockOrientation, unlockOrientation];
}

function useIntersectionObserver(target, callback, options = defaultOptions$1) {
  const savedCallback = useLatest(callback);
  const observerRef = useRef();
  const element = useLatestElement(target);
  const stop = useCallback(() => {
    if (observerRef.current) {
      observerRef.current.disconnect();
    }
  }, []);
  useEffect(() => {
    if (!element) {
      return;
    }
    observerRef.current = new IntersectionObserver(
      savedCallback.current,
      options
    );
    observerRef.current.observe(element);
    return stop;
  }, [options, element]);
  return stop;
}

function usePageLeave() {
  const [isLeft, setIsLeft] = useState(false);
  const handler = (event) => {
    if (!window)
      return;
    event = event || window.event;
    const from = event.relatedTarget || event.toElement;
    setIsLeft(!from);
  };
  useEventListener("mouseout", handler, () => window, { passive: true });
  useEventListener("mouseleave", handler, () => document, { passive: true });
  useEventListener("mouseenter", handler, () => document, { passive: true });
  return isLeft;
}

const getInitialState$2 = (defaultValue) => {
  if (defaultValue !== void 0) {
    return defaultValue;
  }
  if (isBrowser) {
    return document.visibilityState;
  }
  if (process.env.NODE_ENV !== "production") {
    console.warn(
      "`useDocumentVisibility` When server side rendering, defaultValue should be defined to prevent a hydration mismatches."
    );
  }
  return "visible";
};
function useDocumentVisibility(defaultValue) {
  const [visible, setVisible] = useState(
    getInitialState$2(defaultValue)
  );
  useEventListener(
    "visibilitychange",
    () => {
      setVisible(document.visibilityState);
    },
    () => document
  );
  useEffect(() => {
    setVisible(document.visibilityState);
  }, []);
  return visible;
}

function useResizeObserver(target, callback, options = defaultOptions$1) {
  const savedCallback = useLatest(callback);
  const observerRef = useRef();
  const element = useLatestElement(target);
  const stop = useCallback(() => {
    if (observerRef.current) {
      observerRef.current.disconnect();
    }
  }, []);
  useEffect(() => {
    if (!element) {
      return;
    }
    observerRef.current = new ResizeObserver(savedCallback.current);
    observerRef.current.observe(element, options);
    return stop;
  }, [options, element]);
  return stop;
}

function useDropZone(target, onDrop) {
  const [over, setOver] = useState(false);
  const counter = useRef(0);
  useEventListener(
    "dragenter",
    (event) => {
      event.preventDefault();
      counter.current += 1;
      setOver(true);
    },
    target
  );
  useEventListener(
    "dragover",
    (event) => {
      event.preventDefault();
    },
    target
  );
  useEventListener(
    "dragleave",
    (event) => {
      event.preventDefault();
      counter.current -= 1;
      if (counter.current === 0) {
        setOver(false);
      }
    },
    target
  );
  useEventListener(
    "drop",
    (event) => {
      var _a, _b;
      event.preventDefault();
      counter.current = 0;
      setOver(false);
      const files = Array.from((_b = (_a = event.dataTransfer) == null ? void 0 : _a.files) != null ? _b : []);
      onDrop == null ? void 0 : onDrop(files.length === 0 ? null : files);
    },
    target
  );
  return over;
}

var __defProp$2 = Object.defineProperty;
var __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;
var __hasOwnProp$2 = Object.prototype.hasOwnProperty;
var __propIsEnum$2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$2 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$2.call(b, prop))
      __defNormalProp$2(a, prop, b[prop]);
  if (__getOwnPropSymbols$2)
    for (var prop of __getOwnPropSymbols$2(b)) {
      if (__propIsEnum$2.call(b, prop))
        __defNormalProp$2(a, prop, b[prop]);
    }
  return a;
};
const DEFAULT_OPTIONS = {
  multiple: true,
  accept: "*"
};
function useFileDialog(options = defaultOptions$1) {
  const [files, setFiles] = useState(null);
  const inputRef = useRef();
  const initFn = useCallback(() => {
    if (typeof document === "undefined") {
      return void 0;
    }
    const input = document.createElement("input");
    input.type = "file";
    input.onchange = (event) => {
      const result = event.target;
      setFiles(result.files);
    };
    return input;
  }, []);
  inputRef.current = initFn();
  const open = (localOptions) => {
    if (!inputRef.current) {
      return;
    }
    const _options = __spreadValues$2(__spreadValues$2(__spreadValues$2({}, DEFAULT_OPTIONS), options), localOptions);
    inputRef.current.multiple = _options.multiple;
    inputRef.current.accept = _options.accept;
    inputRef.current.capture = _options.capture;
    inputRef.current.click();
  };
  const reset = () => {
    setFiles(null);
    if (inputRef.current) {
      inputRef.current.value = "";
    }
  };
  return [files, open, reset];
}

const ARRIVED_STATE_THRESHOLD_PIXELS = 1;
const defaultListerOptions = {
  capture: false,
  passive: true
};
function useScroll(target, options = defaultOptions$1) {
  const {
    throttle = 0,
    idle = 200,
    onStop = noop,
    onScroll = noop,
    offset = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    },
    eventListenerOptions = defaultListerOptions
  } = options;
  const [x, setX] = useState(0);
  const [y, setY] = useState(0);
  const [isScrolling, setIsScrolling] = useState(false);
  const [arrivedState, setArrivedState] = useState({
    left: true,
    right: false,
    top: true,
    bottom: false
  });
  const [directions, setDirections] = useState({
    left: false,
    right: false,
    top: false,
    bottom: false
  });
  const { run: onScrollEnd } = useDebounceFn((e) => {
    setIsScrolling(false);
    setDirections({ left: false, right: false, top: false, bottom: false });
    onStop(e);
  }, throttle + idle);
  const onScrollHandler = useEvent((e) => {
    const eventTarget = e.target === document ? e.target.documentElement : e.target;
    const scrollLeft = eventTarget.scrollLeft;
    let scrollTop = eventTarget.scrollTop;
    if (e.target === document && !scrollTop)
      scrollTop = document.body.scrollTop;
    setX(scrollLeft);
    setY(scrollTop);
    setDirections({
      left: scrollLeft < x,
      right: scrollLeft > x,
      top: scrollTop < y,
      bottom: scrollTop > y
    });
    setArrivedState({
      left: scrollLeft <= 0 + (offset.left || 0),
      right: scrollLeft + eventTarget.clientWidth >= eventTarget.scrollWidth - (offset.right || 0) - ARRIVED_STATE_THRESHOLD_PIXELS,
      top: scrollTop <= 0 + (offset.top || 0),
      bottom: scrollTop + eventTarget.clientHeight >= eventTarget.scrollHeight - (offset.bottom || 0) - ARRIVED_STATE_THRESHOLD_PIXELS
    });
    setIsScrolling(true);
    onScrollEnd(e);
    onScroll(e);
  });
  const { run: throttleOnScroll } = useThrottleFn(onScrollHandler, throttle);
  useEventListener(
    "scroll",
    throttle ? throttleOnScroll : onScrollHandler,
    target,
    eventListenerOptions
  );
  return [x, y, isScrolling, arrivedState, directions];
}

var __defProp$1 = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$1 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$1.call(b, prop))
      __defNormalProp$1(a, prop, b[prop]);
  if (__getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(b)) {
      if (__propIsEnum$1.call(b, prop))
        __defNormalProp$1(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async$4 = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
function useInfiniteScroll(target, onLoadMore, options = defaultOptions$1) {
  var _a, _b;
  const savedLoadMore = useLatest(onLoadMore);
  const direction = (_a = options.direction) != null ? _a : "bottom";
  const state = useScroll(target, __spreadProps(__spreadValues$1({}, options), {
    offset: __spreadValues$1({
      [direction]: (_b = options.distance) != null ? _b : 0
    }, options.offset)
  }));
  const element = useLatestElement(target);
  const di = state[3][direction];
  useUpdateEffect(() => {
    const fn = () => __async$4(this, null, function* () {
      var _a2, _b2;
      const previous = {
        height: (_a2 = element == null ? void 0 : element.scrollHeight) != null ? _a2 : 0,
        width: (_b2 = element == null ? void 0 : element.scrollWidth) != null ? _b2 : 0
      };
      yield savedLoadMore.current(state);
      if (options.preserveScrollPosition && element) {
        element.scrollTo({
          top: element.scrollHeight - previous.height,
          left: element.scrollWidth - previous.width
        });
      }
    });
    fn();
  }, [di, options.preserveScrollPosition]);
}

const defaultEvents = [
  "mousedown",
  "mouseup",
  "keydown",
  "keyup"
];
function useKeyModifier(modifier, options = defaultOptions$1) {
  const { events = defaultEvents, initial = false } = options;
  const [state, setState] = useState(initial);
  useMount(() => {
    events.forEach((listenEvent) => {
      on(document, listenEvent, (evt) => {
        if (typeof evt.getModifierState === "function") {
          setState(evt.getModifierState(modifier));
        }
      });
    });
    return () => {
      events.forEach((listenerEvent) => {
        off(document, listenerEvent, (evt) => {
          if (typeof evt.getModifierState === "function") {
            setState(evt.getModifierState(modifier));
          }
        });
      });
    };
  });
  return state;
}

const listenerOptions$2 = { passive: true };
function useMousePressed(target, options = defaultOptions$1) {
  const { touch = true, drag = true, initialValue = false } = options;
  const [pressed, setPressed] = useState(initialValue);
  const [sourceType, setSourceType] = useState(null);
  const element = useLatestElement(target);
  const onPressed = useCallback(
    (srcType) => () => {
      setPressed(true);
      setSourceType(srcType);
    },
    []
  );
  const onReleased = useCallback(() => {
    setPressed(false);
    setSourceType(null);
  }, []);
  useEventListener("mousedown", onPressed("mouse"), target, listenerOptions$2);
  useEventListener("mouseleave", onReleased, () => window, listenerOptions$2);
  useEventListener("mouseup", onReleased, () => window, listenerOptions$2);
  useEffect(() => {
    if (drag) {
      element == null ? void 0 : element.addEventListener(
        "dragstart",
        onPressed("mouse"),
        listenerOptions$2
      );
      element == null ? void 0 : element.addEventListener("drop", onReleased, listenerOptions$2);
      element == null ? void 0 : element.addEventListener("dragend", onReleased, listenerOptions$2);
    }
    if (touch) {
      element == null ? void 0 : element.addEventListener(
        "touchstart",
        onPressed("touch"),
        listenerOptions$2
      );
      element == null ? void 0 : element.addEventListener("touchend", onReleased, listenerOptions$2);
      element == null ? void 0 : element.addEventListener("touchcancel", onReleased, listenerOptions$2);
    }
    return () => {
      if (drag) {
        element == null ? void 0 : element.removeEventListener("dragstart", onPressed("mouse"));
        element == null ? void 0 : element.removeEventListener("drop", onReleased);
        element == null ? void 0 : element.removeEventListener("dragend", onReleased);
      }
      if (touch) {
        element == null ? void 0 : element.removeEventListener("touchstart", onPressed("touch"));
        element == null ? void 0 : element.removeEventListener("touchend", onReleased);
        element == null ? void 0 : element.removeEventListener("touchcancel", onReleased);
      }
    };
  }, [drag, onPressed, onReleased, touch, element]);
  return [pressed, sourceType];
}

function preventDefault(rawEvent) {
  const e = rawEvent || window.event;
  if (e.touches.length > 1) {
    return true;
  }
  if (e.preventDefault) {
    e.preventDefault();
  }
  return false;
}
function useScrollLock(target, initialState = false) {
  const [locked, setLocked] = useState(initialState);
  const initialOverflowRef = useRef("scroll");
  const element = useLatestElement(target);
  useEffect(() => {
    if (element) {
      initialOverflowRef.current = element.style.overflow;
      if (locked) {
        element.style.overflow = "hidden";
      }
    }
  }, [locked, element]);
  const lock = useEvent(() => {
    if (!element || locked) {
      return;
    }
    if (isIOS) {
      element.addEventListener("touchmove", preventDefault, {
        passive: false
      });
    }
    setLocked(true);
  });
  const unlock = useEvent(() => {
    if (!element || !locked) {
      return;
    }
    if (isIOS) {
      element.removeEventListener("touchmove", preventDefault);
    }
    element.style.overflow = initialOverflowRef.current;
    setLocked(false);
  });
  const set = useEvent((flag) => {
    if (flag) {
      lock();
    } else {
      unlock();
    }
  });
  return [locked, set];
}

function useElementSize(target, options = defaultOptions$1) {
  const { box = "content-box" } = options;
  const [width, setWidth] = useState(0);
  const [height, setHeight] = useState(0);
  useResizeObserver(
    target,
    ([entry]) => {
      const boxSize = box === "border-box" ? entry.borderBoxSize : box === "content-box" ? entry.contentBoxSize : entry.devicePixelContentBoxSize;
      if (boxSize) {
        setWidth(boxSize.reduce((acc, { inlineSize }) => acc + inlineSize, 0));
        setHeight(boxSize.reduce((acc, { blockSize }) => acc + blockSize, 0));
      } else {
        setWidth(entry.contentRect.width);
        setHeight(entry.contentRect.height);
      }
    },
    options
  );
  return [width, height];
}

function useVirtualList(list = [], options) {
  const containerRef = useRef(null);
  const [width, height] = useElementSize(containerRef);
  const [currentList, setCurrentList] = useState([]);
  const { itemHeight, overscan = 5, containerHeight = 300 } = options;
  const state = useRef({ start: 0, end: 10 });
  const getViewCapacity = (containerHeight2) => {
    if (typeof itemHeight === "number") {
      return Math.ceil(containerHeight2 / itemHeight);
    }
    const { start = 0 } = state.current;
    let sum = 0;
    let capacity = 0;
    for (let i = start; i < list.length; i++) {
      const height2 = itemHeight(i);
      sum += height2;
      if (sum >= containerHeight2) {
        capacity = i;
        break;
      }
    }
    return capacity - start;
  };
  const getOffset = (scrollTop) => {
    if (typeof itemHeight === "number")
      return Math.floor(scrollTop / itemHeight) + 1;
    let sum = 0;
    let offset = 0;
    for (let i = 0; i < list.length; i++) {
      const height2 = itemHeight(i);
      sum += height2;
      if (sum >= scrollTop) {
        offset = i;
        break;
      }
    }
    return offset + 1;
  };
  const calculateRange = useEvent(() => {
    const element = containerRef.current;
    if (element != null) {
      const offset = getOffset(element.scrollTop);
      const viewCapacity = getViewCapacity(element.clientHeight);
      const from = offset - overscan;
      const to = offset + viewCapacity + overscan;
      state.current = {
        start: from < 0 ? 0 : from,
        end: to > list.length ? list.length : to
      };
      const { start, end } = state.current;
      setCurrentList(
        list.slice(start, end).map((ele, index) => ({
          data: ele,
          index: index + start
        }))
      );
    }
  });
  useEffect(() => {
    calculateRange();
  }, [width, height, list]);
  const totalHeight = useMemo(() => {
    if (typeof itemHeight === "number") {
      return list.length * itemHeight;
    }
    return list.reduce((sum, _, index) => sum + itemHeight(index), 0);
  }, [itemHeight, list]);
  const getDistanceTop = useCallback(
    (index) => {
      if (typeof itemHeight === "number") {
        const height3 = index * itemHeight;
        return height3;
      }
      const height2 = list.slice(0, index).reduce((sum, _, i) => sum + itemHeight(i), 0);
      return height2;
    },
    [itemHeight, list]
  );
  const offsetTop = getDistanceTop(state.current.start);
  const wrapperProps = useMemo(() => {
    return {
      style: {
        width: "100%",
        height: `${totalHeight - offsetTop}px`,
        marginTop: `${offsetTop}px`
      }
    };
  }, [totalHeight, offsetTop]);
  const scrollTo = (index) => {
    if (containerRef.current) {
      containerRef.current.scrollTop = getDistanceTop(index);
      calculateRange();
    }
  };
  const containerStyle = useMemo(() => {
    return { overflowY: "auto", height: containerHeight };
  }, [containerHeight]);
  return {
    list: currentList,
    scrollTo,
    containerProps: {
      ref: containerRef,
      onScroll: () => {
        calculateRange();
      },
      style: containerStyle
    },
    wrapperProps
  };
}

function usePreferredColorScheme(defaultState) {
  const isLight = useMediaQuery("(prefers-color-scheme: light)", false);
  const isDark = useMediaQuery("(prefers-color-scheme: dark)", false);
  if (!isBrowser && defaultState) {
    return defaultState;
  }
  return isDark ? "dark" : isLight ? "light" : "no-preference";
}

function usePreferredContrast(defaultState) {
  const isMore = useMediaQuery("(prefexrs-contrast: more)", false);
  const isLess = useMediaQuery("(prefers-contrast: less)", false);
  const isCustom = useMediaQuery("(prefers-contrast: custom)", false);
  if (!isBrowser && defaultState) {
    return defaultState;
  }
  return isMore ? "more" : isLess ? "less" : isCustom ? "custom" : "no-preference";
}

function useActiveElement() {
  const [active, setActive] = useState(null);
  const listener = useCallback(() => {
    setActive(window == null ? void 0 : window.document.activeElement);
  }, []);
  useEventListener("blur", listener, () => window, true);
  useEventListener("focus", listener, () => window, true);
  return active;
}

function useDraggable(target, options = {}) {
  var _a, _b;
  const draggingElement = options.draggingElement;
  const draggingHandle = (_a = options.handle) != null ? _a : target;
  const [position, setPositon] = useState(
    (_b = options.initialValue) != null ? _b : { x: 0, y: 0 }
  );
  useEffect(() => {
    var _a2;
    setPositon((_a2 = options.initialValue) != null ? _a2 : { x: 0, y: 0 });
  }, [options.initialValue]);
  const [pressedDelta, setPressedDelta] = useState();
  const filterEvent = (e) => {
    if (options.pointerTypes) {
      return options.pointerTypes.includes(e.pointerType);
    }
    return true;
  };
  const handleEvent = (e) => {
    if (options.preventDefault) {
      e.preventDefault();
    }
    if (options.stopPropagation) {
      e.stopPropagation();
    }
  };
  const start = (e) => {
    var _a2;
    const element = getTargetElement(target);
    if (!filterEvent(e) || !element) {
      return;
    }
    if (options.exact && e.target !== element) {
      return;
    }
    const rect = element.getBoundingClientRect();
    const pos = {
      x: e.pageX - rect.left,
      y: e.pageY - rect.top
    };
    if (((_a2 = options.onStart) == null ? void 0 : _a2.call(options, pos, e)) === false) {
      return;
    }
    setPressedDelta(pos);
    handleEvent(e);
  };
  const move = (e) => {
    var _a2;
    if (!filterEvent(e)) {
      return;
    }
    if (!pressedDelta) {
      return;
    }
    setPositon({
      x: e.pageX - pressedDelta.x,
      y: e.pageY - pressedDelta.y
    });
    (_a2 = options.onMove) == null ? void 0 : _a2.call(options, position, e);
    handleEvent(e);
  };
  const end = (e) => {
    var _a2;
    if (!filterEvent(e)) {
      return;
    }
    if (!pressedDelta) {
      return;
    }
    setPressedDelta(void 0);
    (_a2 = options.onEnd) == null ? void 0 : _a2.call(options, position, e);
    handleEvent(e);
  };
  useEventListener("pointerdown", start, draggingHandle, true);
  useEventListener("pointermove", move, draggingElement, true);
  useEventListener("pointerup", end, draggingElement, true);
  return [position.x, position.y, !!pressedDelta];
}

function useElementBounding(target, options = defaultOptions$1) {
  const {
    reset = true,
    windowResize = true,
    windowScroll = true,
    immediate = true
  } = options;
  const [height, setHeight] = useState(0);
  const [bottom, setBottom] = useState(0);
  const [left, setLeft] = useState(0);
  const [right, setRight] = useState(0);
  const [top, setTop] = useState(0);
  const [width, setWidth] = useState(0);
  const [x, setX] = useState(0);
  const [y, setY] = useState(0);
  const update = useEvent(() => {
    const element = getTargetElement(target);
    if (!element) {
      if (reset) {
        setHeight(0);
        setBottom(0);
        setLeft(0);
        setRight(0);
        setTop(0);
        setWidth(0);
        setX(0);
        setY(0);
      }
      return;
    }
    const rect = element.getBoundingClientRect();
    setHeight(rect.height);
    setBottom(rect.bottom);
    setLeft(rect.left);
    setRight(rect.right);
    setTop(rect.top);
    setWidth(rect.width);
    setX(rect.x);
    setY(rect.y);
  });
  useResizeObserver(target, update);
  useEffect(() => {
    if (immediate) {
      update();
    }
  }, [immediate, update]);
  useEffect(() => {
    if (windowScroll) {
      window.addEventListener("scroll", update, { passive: true });
    }
    if (windowResize) {
      window.addEventListener("resize", update, { passive: true });
    }
    return () => {
      if (windowScroll) {
        window.removeEventListener("scroll", update);
      }
      if (windowResize) {
        window.removeEventListener("resize", update);
      }
    };
  }, [update, windowResize, windowScroll]);
  return {
    height,
    bottom,
    left,
    right,
    top,
    width,
    x,
    y,
    update
  };
}

function useElementVisibility(target, options = defaultOptions$1) {
  const [visible, setVisible] = useState(false);
  const callback = useCallback((entries) => {
    const rect = entries[0].boundingClientRect;
    setVisible(
      rect.top <= (window.innerHeight || document.documentElement.clientHeight) && rect.left <= (window.innerWidth || document.documentElement.clientWidth) && rect.bottom >= 0 && rect.right >= 0
    );
  }, []);
  const stop = useIntersectionObserver(target, callback, options);
  return [visible, stop];
}

function useWindowsFocus(defauleValue = false) {
  const [focused, setFocused] = useState(defauleValue);
  useEffect(() => {
    setFocused(window.document.hasFocus());
  }, []);
  useEventListener("blur", () => {
    setFocused(false);
  });
  useEventListener("focus", () => {
    setFocused(true);
  });
  return focused;
}

function useWindowSize() {
  const [windowSize, setWindowSize] = useState({
    width: 0,
    height: 0
  });
  const handleSize = () => {
    setWindowSize({
      width: window.innerWidth,
      height: window.innerHeight
    });
  };
  useEventListener("resize", handleSize);
  useIsomorphicLayoutEffect(() => {
    handleSize();
  }, []);
  return windowSize;
}

const listenerOptions$1 = {
  capture: false,
  passive: true
};
function useWindowScroll() {
  const [state, setState] = useRafState(() => ({
    x: 0,
    y: 0
  }));
  const handleScroll = () => {
    setState({ x: window.scrollX, y: window.scrollY });
  };
  useEventListener("scroll", handleScroll, window, listenerOptions$1);
  useIsomorphicLayoutEffect(() => {
    handleScroll();
  }, []);
  return state;
}

var __async$3 = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
function useClipBorad() {
  const [text, setText] = useState("");
  const updateText = useCallback(() => {
    window.navigator.clipboard.readText().then((value) => {
      setText(value);
    });
  }, []);
  useEventListener("copy", updateText);
  useEventListener("cut", updateText);
  const copy = useCallback((txt) => __async$3(this, null, function* () {
    setText(txt);
    yield window.navigator.clipboard.writeText(txt);
  }), []);
  return [text, copy];
}

const listerOptions = {
  passive: true
};
function useClickOutside(target, handler) {
  const savedHandler = useLatest(handler);
  const listener = (event) => {
    const element = getTargetElement(target);
    if (!element) {
      return;
    }
    const elements = event.composedPath();
    if (element === event.target || elements.includes(element)) {
      return;
    }
    savedHandler.current(event);
  };
  useEventListener("mousedown", listener, defaultWindow, listerOptions);
  useEventListener("touchstart", listener, defaultWindow, listerOptions);
}

function useCycleList(list, i = 0) {
  const [index, setIndex] = useState(i);
  const set = (i2) => {
    const length = list.length;
    const nextIndex = ((index + i2) % length + length) % length;
    setIndex(nextIndex);
  };
  const next = (i2 = 1) => {
    set(i2);
  };
  const prev = (i2 = 1) => {
    set(-i2);
  };
  return [list[index], next, prev];
}

function useFocus(target, initialValue = false) {
  const [focus, innerSetFocus] = useState(initialValue);
  useEventListener("focus", () => innerSetFocus(true), target);
  useEventListener("blur", () => innerSetFocus(false), target);
  const setFocus = (value) => {
    const element = getTargetElement(target);
    if (!element) {
      return;
    }
    if (!value) {
      element.blur();
    } else if (value) {
      element.focus();
    }
  };
  useMount(() => {
    setFocus(focus);
  });
  return [focus, setFocus];
}

function useControlled(props) {
  const { controlled, defaultValue: defaultProp, state } = props != null ? props : {
    controlled: void 0,
    defaultValue: void 0,
    state: "value"
  };
  const { current: isControlled } = useRef(controlled !== void 0);
  const [valueState, setValue] = useState(defaultProp);
  const value = isControlled ? controlled : valueState;
  useEffect(() => {
    if (isControlled !== (controlled !== void 0)) {
      console.error(
        [
          `A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`,
          "Elements should not switch from uncontrolled to controlled (or vice versa).",
          `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`,
          "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.",
          "More info: https://fb.me/react-controlled-components"
        ].join("\n")
      );
    }
  }, [state, controlled]);
  const setValueIfUncontrolled = useCallback((newValue) => {
    if (!isControlled) {
      setValue(newValue);
    }
  }, []);
  return [value, setValueIfUncontrolled];
}

const record = /* @__PURE__ */ new WeakSet();
const createOnceEffect = (hook) => (effect, deps) => {
  const onceWrapper = () => {
    const shouldStart = !record.has(effect);
    if (shouldStart) {
      record.add(effect);
      effect();
    }
  };
  hook(() => {
    onceWrapper();
  }, deps);
};

var index$1 = createOnceEffect(useEffect);

var index = createOnceEffect(useLayoutEffect);

function useReducedMotion(defaultState) {
  return useMediaQuery("(prefers-reduced-motion: reduce)", defaultState);
}

const setScrollParam = ({
  axis,
  parent,
  distance
}) => {
  if (!parent && typeof document === "undefined") {
    return;
  }
  const method = axis === "y" ? "scrollTop" : "scrollLeft";
  if (parent) {
    parent[method] = distance;
  } else {
    const { body, documentElement } = document;
    body[method] = distance;
    documentElement[method] = distance;
  }
};
const isScrollElement = (axis, node) => {
  if (!node) {
    return false;
  }
  const AXIS = axis === "x" ? "X" : "Y";
  return getComputedStyle(node)[`overflow${AXIS}`] === "auto" || getComputedStyle(node)[`overflow${AXIS}`] === "scroll";
};
const cache = /* @__PURE__ */ new Map();
const getScrollParent = (axis, node) => {
  if (!node || !node.parentElement) {
    return null;
  }
  if (cache.has(node)) {
    return cache.get(node) || null;
  }
  let parent = node.parentElement;
  while (parent && !isScrollElement(axis, parent)) {
    parent = parent.parentElement;
  }
  if (parent) {
    cache.set(node, parent);
  }
  return parent;
};
const getScrollStart = ({
  axis,
  parent
}) => {
  if (!parent && typeof document === "undefined") {
    return 0;
  }
  const method = axis === "y" ? "scrollTop" : "scrollLeft";
  if (parent) {
    return parent[method];
  }
  const { body, documentElement } = document;
  return body[method] + documentElement[method];
};

const easeInOutQuad = (t) => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;

const getRelativePosition = ({
  axis,
  target,
  parent,
  alignment,
  offset,
  isList
}) => {
  if (!target || !parent && typeof document === "undefined") {
    return 0;
  }
  const isCustomParent = !!parent;
  const parentElement = parent || document.body;
  const parentPosition = parentElement.getBoundingClientRect();
  const targetPosition = target.getBoundingClientRect();
  const getDiff = (property) => targetPosition[property] - parentPosition[property];
  if (axis === "y") {
    const diff = getDiff("top");
    if (diff === 0) {
      return 0;
    }
    if (alignment === "start") {
      const distance = diff - offset;
      const shouldScroll = distance <= targetPosition.height * (isList ? 0 : 1) || !isList;
      return shouldScroll ? distance : 0;
    }
    const parentHeight = isCustomParent ? parentPosition.height : window.innerHeight;
    if (alignment === "end") {
      const distance = diff + offset - parentHeight + targetPosition.height;
      const shouldScroll = distance >= -targetPosition.height * (isList ? 0 : 1) || !isList;
      return shouldScroll ? distance : 0;
    }
    if (alignment === "center") {
      return diff - parentHeight / 2 + targetPosition.height / 2;
    }
    return 0;
  }
  if (axis === "x") {
    const diff = getDiff("left");
    if (diff === 0) {
      return 0;
    }
    if (alignment === "start") {
      const distance = diff - offset;
      const shouldScroll = distance <= targetPosition.width || !isList;
      return shouldScroll ? distance : 0;
    }
    const parentWidth = isCustomParent ? parentPosition.width : window.innerWidth;
    if (alignment === "end") {
      const distance = diff + offset - parentWidth + targetPosition.width;
      const shouldScroll = distance >= -targetPosition.width || !isList;
      return shouldScroll ? distance : 0;
    }
    if (alignment === "center") {
      return diff - parentWidth / 2 + targetPosition.width / 2;
    }
    return 0;
  }
  return 0;
};

const listenerOptions = { passive: true };
function useScrollIntoView(targetElement, {
  duration = 1250,
  axis = "y",
  onScrollFinish,
  easing = easeInOutQuad,
  offset = 0,
  cancelable = true,
  isList = false
} = defaultOptions$1, scrollElement) {
  const frameID = useRef(0);
  const startTime = useRef(0);
  const shouldStop = useRef(false);
  const reducedMotion = useReducedMotion(false);
  const cancel = () => {
    if (frameID.current) {
      cancelAnimationFrame(frameID.current);
    }
  };
  const element = useLatestElement(targetElement);
  const scrollIntoView = ({
    alignment = "start"
  } = {}) => {
    var _a;
    const parent = getTargetElement(scrollElement) || getScrollParent(axis, element);
    shouldStop.current = false;
    if (frameID.current) {
      cancel();
    }
    const start = (_a = getScrollStart({ parent, axis })) != null ? _a : 0;
    const change = getRelativePosition({
      parent,
      target: element,
      axis,
      alignment,
      offset,
      isList
    }) - (parent ? 0 : start);
    const animateScroll = () => {
      if (startTime.current === 0) {
        startTime.current = performance.now();
      }
      const now = performance.now();
      const elapsed = now - startTime.current;
      const t = reducedMotion || duration === 0 ? 1 : elapsed / duration;
      const distance = start + change * easing(t);
      setScrollParam({
        parent,
        axis,
        distance
      });
      if (!shouldStop.current && t < 1) {
        frameID.current = requestAnimationFrame(animateScroll);
      } else {
        typeof onScrollFinish === "function" && onScrollFinish();
        startTime.current = 0;
        frameID.current = 0;
        cancel();
      }
    };
    animateScroll();
  };
  const handleStop = () => {
    if (cancelable) {
      shouldStop.current = true;
    }
  };
  useEventListener("wheel", handleStop, null, listenerOptions);
  useEventListener("touchmove", handleStop, null, listenerOptions);
  useEffect(() => cancel, []);
  return {
    scrollIntoView,
    cancel
  };
}

const useSticky = (targetElement, { axis = "y", nav = 0 }, scrollElement) => {
  const [isSticky, setSticky] = useState(false);
  const element = useLatestElement(targetElement);
  const { run: scrollHandler } = useThrottleFn(() => {
    if (!element) {
      return;
    }
    const rect = element.getBoundingClientRect();
    if (axis === "y") {
      setSticky((rect == null ? void 0 : rect.top) <= nav);
    } else {
      setSticky((rect == null ? void 0 : rect.left) <= nav);
    }
  }, 50);
  useEffect(() => {
    const scrollParent = getTargetElement(scrollElement) || getScrollParent(axis, element);
    if (!element || !scrollParent) {
      return;
    }
    scrollParent.addEventListener("scroll", scrollHandler);
    scrollHandler();
    return () => {
      scrollParent.removeEventListener("scroll", scrollHandler);
    };
  }, [axis, element, scrollElement, scrollHandler]);
  return [isSticky, setSticky];
};

var __async$2 = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
function useAsyncEffect(effect, cleanup = noop, deps) {
  const mounted = useMountedState();
  useEffect(() => {
    const execute = () => __async$2(this, null, function* () {
      if (!mounted()) {
        return;
      }
      yield effect();
    });
    execute();
    return () => {
      cleanup();
    };
  }, deps);
}

const padZero = (time) => {
  return `${time}`.length < 2 ? `0${time}` : `${time}`;
};
const getHMSTime = (timeDiff) => {
  if (timeDiff <= 0) {
    return ["00", "00", "00"];
  }
  if (timeDiff > 100 * 3600) {
    return ["99", "59", "59"];
  }
  const hour = Math.floor(timeDiff / 3600);
  const minute = Math.floor((timeDiff - hour * 3600) / 60);
  const second = timeDiff - hour * 3600 - minute * 60;
  return [padZero(hour), padZero(minute), padZero(second)];
};
const useCountDown = (time, format = getHMSTime, callback) => {
  const [remainTime, setRemainTime] = useState(time);
  const [delay, setDelay] = useState(1e3);
  useInterval(() => {
    if (remainTime <= 0) {
      setDelay(null);
      return;
    }
    setRemainTime(remainTime - 1);
  }, delay);
  useEffect(() => {
    if (time > 0 && remainTime <= 0) {
      callback && callback();
    }
  }, [callback, remainTime, time]);
  const [hour, minute, secoud] = format(remainTime);
  return [hour, minute, secoud];
};

function useTextSelection() {
  const [selection, setSelection] = useState(null);
  const forceUpdate = useUpdate();
  const handleSelectionChange = () => {
    setSelection(document.getSelection());
    forceUpdate();
  };
  useEventListener("selectionchange", handleSelectionChange, () => document);
  useEffect(() => {
    setSelection(document.getSelection());
  }, []);
  return selection;
}

var __async$1 = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
function useEyeDropper() {
  const isSupported = useSupported(
    () => typeof window !== "undefined" && "EyeDropper" in window,
    true
  );
  const open = useCallback(
    (..._0) => __async$1(this, [..._0], function* (options = {}) {
      if (!isSupported) {
        return {
          sRGBHex: ""
        };
      }
      const eyeDropper = new window.EyeDropper();
      return eyeDropper.open(options);
    }),
    [isSupported]
  );
  return [isSupported, open];
}

/*! js-cookie v3.0.5 | MIT */
/* eslint-disable no-var */
function assign (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      target[key] = source[key];
    }
  }
  return target
}
/* eslint-enable no-var */

/* eslint-disable no-var */
var defaultConverter = {
  read: function (value) {
    if (value[0] === '"') {
      value = value.slice(1, -1);
    }
    return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent)
  },
  write: function (value) {
    return encodeURIComponent(value).replace(
      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,
      decodeURIComponent
    )
  }
};
/* eslint-enable no-var */

/* eslint-disable no-var */

function init (converter, defaultAttributes) {
  function set (name, value, attributes) {
    if (typeof document === 'undefined') {
      return
    }

    attributes = assign({}, defaultAttributes, attributes);

    if (typeof attributes.expires === 'number') {
      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
    }
    if (attributes.expires) {
      attributes.expires = attributes.expires.toUTCString();
    }

    name = encodeURIComponent(name)
      .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)
      .replace(/[()]/g, escape);

    var stringifiedAttributes = '';
    for (var attributeName in attributes) {
      if (!attributes[attributeName]) {
        continue
      }

      stringifiedAttributes += '; ' + attributeName;

      if (attributes[attributeName] === true) {
        continue
      }

      // Considers RFC 6265 section 5.2:
      // ...
      // 3.  If the remaining unparsed-attributes contains a %x3B (";")
      //     character:
      // Consume the characters of the unparsed-attributes up to,
      // not including, the first %x3B (";") character.
      // ...
      stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
    }

    return (document.cookie =
      name + '=' + converter.write(value, name) + stringifiedAttributes)
  }

  function get (name) {
    if (typeof document === 'undefined' || (arguments.length && !name)) {
      return
    }

    // To prevent the for loop in the first place assign an empty array
    // in case there are no cookies at all.
    var cookies = document.cookie ? document.cookie.split('; ') : [];
    var jar = {};
    for (var i = 0; i < cookies.length; i++) {
      var parts = cookies[i].split('=');
      var value = parts.slice(1).join('=');

      try {
        var found = decodeURIComponent(parts[0]);
        jar[found] = converter.read(value, found);

        if (name === found) {
          break
        }
      } catch (e) {}
    }

    return name ? jar[name] : jar
  }

  return Object.create(
    {
      set,
      get,
      remove: function (name, attributes) {
        set(
          name,
          '',
          assign({}, attributes, {
            expires: -1
          })
        );
      },
      withAttributes: function (attributes) {
        return init(this.converter, assign({}, this.attributes, attributes))
      },
      withConverter: function (converter) {
        return init(assign({}, this.converter, converter), this.attributes)
      }
    },
    {
      attributes: { value: Object.freeze(defaultAttributes) },
      converter: { value: Object.freeze(converter) }
    }
  )
}

var api = init(defaultConverter, { path: '/' });

const getInitialState$1 = (key, defaultValue) => {
  if (defaultValue !== void 0) {
    return defaultValue;
  }
  if (isBrowser) {
    return api.get(key);
  }
  if (process.env.NODE_ENV !== "production") {
    console.warn(
      "`useCookie` When server side rendering, defaultValue should be defined to prevent a hydration mismatches."
    );
  }
  return "";
};
function useCookie(key, options = defaultOptions$1, defaultValue) {
  const [cookieValue, setCookieValue] = useState(
    getInitialState$1(key, defaultValue)
  );
  useEffect(() => {
    const getStoredValue = () => {
      const raw = api.get(key);
      if (raw !== void 0 && raw !== null) {
        return raw;
      } else {
        if (defaultValue === void 0) {
          api.remove(key);
        } else {
          api.set(key, defaultValue, options);
        }
        return defaultValue;
      }
    };
    setCookieValue(getStoredValue());
  }, [defaultValue, key, options]);
  const updateCookie = useCallback(
    (newValue) => {
      const value = isFunction$1(newValue) ? newValue(cookieValue) : newValue;
      if (value === void 0) {
        api.remove(key);
      } else {
        api.set(key, value, options);
      }
      setCookieValue(value);
    },
    [key, cookieValue, options]
  );
  const refreshCookie = useCallback(() => {
    const cookieValue2 = api.get(key);
    if (isString(cookieValue2)) {
      setCookieValue(cookieValue2);
    }
  }, [key]);
  return [cookieValue, updateCookie, refreshCookie];
}

function useDoubleClick({
  target,
  latency = 300,
  onSingleClick = () => {
  },
  onDoubleClick = () => {
  }
}) {
  const element = useLatestElement(target);
  const handle = useCallback(
    (onSingleClick2, onDoubleClick2) => {
      let count = 0;
      return (e) => {
        if (e.type === "touchend") {
          e.stopPropagation();
          e.preventDefault();
        }
        count += 1;
        setTimeout(() => {
          if (count === 1) {
            onSingleClick2(e);
          } else if (count === 2) {
            onDoubleClick2(e);
          }
          count = 0;
        }, latency);
      };
    },
    [latency]
  );
  const handleClick = handle(onSingleClick, onDoubleClick);
  const handleTouchEnd = handle(onSingleClick, onDoubleClick);
  useEventListener("click", handleClick, element);
  useEventListener("touchend", handleTouchEnd, element, { passive: false });
}

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
function useSetState(initialState) {
  const [state, _setState] = useState(initialState);
  const setState = useCallback(
    (statePartial) => _setState((current) => __spreadValues(__spreadValues({}, current), typeof statePartial === "function" ? statePartial(current) : statePartial)),
    []
  );
  return [state, setState];
}

const defaultState = {
  x: 0,
  y: 0,
  width: 0,
  height: 0,
  top: 0,
  left: 0,
  bottom: 0,
  right: 0
};
function useMeasure(target, options = defaultOptions$1) {
  const [rect, setRect] = useState(defaultState);
  const stop = useResizeObserver(
    target,
    (entries) => {
      if (entries[0]) {
        const { x, y, width, height, top, left, bottom, right } = entries[0].contentRect;
        setRect({ x, y, width, height, top, left, bottom, right });
      }
    },
    options
  );
  return [rect, stop];
}

function useHover(target) {
  const [hovered, setHovered] = useState(false);
  const onMouseEnter = useCallback(() => setHovered(true), []);
  const onMouseLeave = useCallback(() => setHovered(false), []);
  useEventListener("mouseenter", onMouseEnter, target);
  useEventListener("mouseleave", onMouseLeave, target);
  return hovered;
}

const defaultOptions = {
  observe: false
};
const getInitialState = (defaultValue) => {
  if (defaultValue !== void 0) {
    return defaultValue;
  }
  if (isBrowser) {
    return "";
  }
  if (process.env.NODE_ENV !== "production") {
    console.warn(
      "`useCssVar` When server side rendering, defaultValue should be defined to prevent a hydration mismatches."
    );
  }
  return "";
};
function useCssVar(prop, target, defaultValue, options = defaultOptions) {
  const { observe } = options;
  const [variable, setVariable] = useState(
    getInitialState(defaultValue)
  );
  const element = useLatestElement(target);
  const observerRef = useRef();
  const set = useCallback(
    (v) => {
      if (element == null ? void 0 : element.style) {
        element == null ? void 0 : element.style.setProperty(prop, v);
        setVariable(v);
      }
    },
    [element, prop]
  );
  const updateCssVar = useCallback(() => {
    var _a;
    if (element) {
      const value = (_a = window.getComputedStyle(element).getPropertyValue(prop)) == null ? void 0 : _a.trim();
      setVariable(value);
    }
  }, [element, prop]);
  useEffect(() => {
    var _a;
    if (!element) {
      return;
    }
    const value = (_a = window.getComputedStyle(element).getPropertyValue(prop)) == null ? void 0 : _a.trim();
    if (!value && defaultValue) {
      set(defaultValue);
    } else {
      updateCssVar();
    }
    if (!observe) {
      return;
    }
    observerRef.current = new MutationObserver(updateCssVar);
    observerRef.current.observe(element, {
      attributeFilter: ["style", "class"]
    });
    return () => {
      if (observerRef.current) {
        observerRef.current.disconnect();
      }
    };
  }, [observe, element, updateCssVar, set, defaultValue, prop]);
  return [variable, set];
}

const topVarName = "--reactuse-safe-area-top";
const rightVarName = "--reactuse-safe-area-right";
const bottomVarName = "--reactuse-safe-area-bottom";
const leftVarName = "--reactuse-safe-area-left";
const defaultElement = () => document.documentElement;
function useScreenSafeArea() {
  const top = useRef("");
  const right = useRef("");
  const bottom = useRef("");
  const left = useRef("");
  const forceUpdate = useUpdate();
  useCssVar(topVarName, defaultElement, "env(safe-area-inset-top, 0px)");
  useCssVar(rightVarName, defaultElement, "env(safe-area-inset-right, 0px)");
  useCssVar(bottomVarName, defaultElement, "env(safe-area-inset-bottom, 0px)");
  useCssVar(leftVarName, defaultElement, "env(safe-area-inset-left, 0px)");
  const { run: update } = useDebounceFn(() => {
    top.current = getValue(topVarName);
    right.current = getValue(rightVarName);
    bottom.current = getValue(bottomVarName);
    left.current = getValue(leftVarName);
    forceUpdate();
  });
  useEffect(() => {
    update();
  }, [update]);
  useEventListener("resize", update);
  return [
    top.current,
    right.current,
    bottom.current,
    left.current,
    update
  ];
}
function getValue(position) {
  return getComputedStyle(document.documentElement).getPropertyValue(position);
}

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
function useWebNotification(requestPermissions = false) {
  const isSupported = useSupported(() => !!window && "Notification" in window);
  const permissionGranted = useRef(false);
  const notificationRef = useRef(null);
  const show = (title, options = defaultOptions$1) => {
    if (!isSupported && !permissionGranted.current) {
      return;
    }
    notificationRef.current = new Notification(title || "", options);
    return notificationRef.current;
  };
  const close = useCallback(() => {
    if (notificationRef.current) {
      notificationRef.current.close();
    }
    notificationRef.current = null;
  }, []);
  useEffect(() => {
    permissionGranted.current = isSupported && "permission" in Notification && Notification.permission === "granted";
  }, [isSupported]);
  const ensurePermissions = useCallback(() => __async(this, null, function* () {
    if (!isSupported)
      return;
    if (!permissionGranted.current && Notification.permission !== "denied") {
      const result = yield Notification.requestPermission();
      if (result === "granted")
        permissionGranted.current = true;
    }
    return permissionGranted.current;
  }), [isSupported]);
  useEffect(() => {
    if (requestPermissions) {
      ensurePermissions();
    }
  }, [requestPermissions, ensurePermissions]);
  useUnmount(close);
  return {
    isSupported,
    show,
    close,
    ensurePermissions,
    permissionGranted
  };
}

function subscribe(callback) {
  window.addEventListener("popstate", callback);
  window.addEventListener("hashchange", callback);
  return () => {
    window.removeEventListener("popstate", callback);
    window.removeEventListener("hashchange", callback);
  };
}
function useLocationSelector(selector, fallback) {
  return useSyncExternalStore(
    subscribe,
    () => selector(location),
    () => fallback
  );
}

export { getHMSTime, useActiveElement, useAsyncEffect, useClickOutside, useClipBorad as useClipboard, useControlled, useCookie, useCountDown, useCounter, useCssVar, useCustomCompareEffect, useCycleList, useDarkMode, useDebounce, useDebounceFn, useDeepCompareEffect, useDocumentVisibility, useDoubleClick, useDraggable, useDropZone, useElementBounding, useElementSize, useElementVisibility, useEvent, useEventEmitter, useEventListener, useEyeDropper, useFavicon, useFileDialog, useFirstMountState, useFocus, index$2 as useFps, useFullscreen, useGeolocation, useHover, useIdle, useInfiniteScroll, useIntersectionObserver, useInterval, useIsomorphicLayoutEffect, useKeyModifier, useLatest, useLocalStorage, useLocationSelector, useLongPress, useMeasure, useMediaDevices, useMediaQuery, useMount, useMountedState, useMouse, useMousePressed, useMutationObserver, useNetwork, useObjectUrl, index$1 as useOnceEffect, index as useOnceLayoutEffect, useOnline, useOrientation, usePageLeave, usePermission, usePreferredColorScheme, usePreferredContrast, usePreferredDark, usePrevious, useRafFn, useRafState, useReducedMotion, useResizeObserver, useScreenSafeArea, useScriptTag, useScroll, useScrollIntoView, useScrollLock, useSessionStorage, useSetState, useSticky, useSupported, useTextDirection, useTextSelection, useThrottle, useThrottleFn, useTimeout, useTimeoutFn, useTitle, useToggle, useUnmount, useUpdate, useUpdateEffect, index$3 as useUpdateLayoutEffect, useVirtualList, useWebNotification, useWindowScroll, useWindowSize, useWindowsFocus };
